// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`decorators class-deco-with-object-param 1`] = `
ScopeManager {
  variables: [
    ImplicitGlobalConstTypeVariable,
    Variable$2 {
      defs: [
        FunctionNameDefinition$1 {
          name: Identifier<"deco">,
          node: TSDeclareFunction$1,
        },
      ],
      name: "deco",
      references: [
        Reference$1 {
          identifier: Identifier<"deco">,
          isRead: true,
          isTypeReference: false,
          isValueReference: true,
          isWrite: false,
          resolved: Variable$2,
        },
      ],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$3 {
      defs: [],
      name: "arguments",
      references: [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$4 {
      defs: [
        ParameterDefinition$2 {
          name: Identifier<"param">,
          node: TSDeclareFunction$1,
        },
      ],
      name: "param",
      references: [],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$5 {
      defs: [
        ParameterDefinition$3 {
          name: Identifier<"param">,
          node: TSFunctionType$2,
        },
      ],
      name: "param",
      references: [],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$6 {
      defs: [
        ClassNameDefinition$4 {
          name: Identifier<"Foo">,
          node: ClassDeclaration$3,
        },
      ],
      name: "Foo",
      references: [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$7 {
      defs: [
        ClassNameDefinition$5 {
          name: Identifier<"Foo">,
          node: ClassDeclaration$3,
        },
      ],
      name: "Foo",
      references: [],
      isValueVariable: true,
      isTypeVariable: true,
    },
  ],
  scopes: [
    GlobalScope$1 {
      block: Program$4,
      isStrict: false,
      references: [
        Reference$1,
      ],
      set: Map {
        "const" => ImplicitGlobalConstTypeVariable,
        "deco" => Variable$2,
        "Foo" => Variable$6,
      },
      type: "global",
      upper: null,
      variables: [
        ImplicitGlobalConstTypeVariable,
        Variable$2,
        Variable$6,
      ],
    },
    FunctionScope$2 {
      block: TSDeclareFunction$1,
      isStrict: false,
      references: [],
      set: Map {
        "arguments" => Variable$3,
        "param" => Variable$4,
      },
      type: "function",
      upper: GlobalScope$1,
      variables: [
        Variable$3,
        Variable$4,
      ],
    },
    FunctionTypeScope$3 {
      block: TSFunctionType$2,
      isStrict: true,
      references: [],
      set: Map {
        "param" => Variable$5,
      },
      type: "functionType",
      upper: FunctionScope$2,
      variables: [
        Variable$5,
      ],
    },
    ClassScope$4 {
      block: ClassDeclaration$3,
      isStrict: true,
      references: [],
      set: Map {
        "Foo" => Variable$7,
      },
      type: "class",
      upper: GlobalScope$1,
      variables: [
        Variable$7,
      ],
    },
  ],
}
`;

exports[`tests/fixtures.test.ts > decorators > class-deco-with-object-param 1`] = `
ScopeManager {
  variables: Array [
    ImplicitGlobalConstTypeVariable,
    Variable$2 {
      defs: Array [
        FunctionNameDefinition$1 {
          name: Identifier<"deco">,
          node: TSDeclareFunction$1,
        },
      ],
      name: "deco",
      references: Array [
        Reference$1 {
          identifier: Identifier<"deco">,
          isRead: true,
          isTypeReference: false,
          isValueReference: true,
          isWrite: false,
          resolved: Variable$2,
        },
      ],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$3 {
      defs: Array [],
      name: "arguments",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$4 {
      defs: Array [
        ParameterDefinition$2 {
          name: Identifier<"param">,
          node: TSDeclareFunction$1,
        },
      ],
      name: "param",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$5 {
      defs: Array [
        ParameterDefinition$3 {
          name: Identifier<"param">,
          node: TSFunctionType$2,
        },
      ],
      name: "param",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$6 {
      defs: Array [
        ClassNameDefinition$4 {
          name: Identifier<"Foo">,
          node: ClassDeclaration$3,
        },
      ],
      name: "Foo",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$7 {
      defs: Array [
        ClassNameDefinition$5 {
          name: Identifier<"Foo">,
          node: ClassDeclaration$3,
        },
      ],
      name: "Foo",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
  ],
  scopes: Array [
    GlobalScope$1 {
      block: Program$4,
      isStrict: false,
      references: Array [
        Reference$1,
      ],
      set: Map {
        "const" => ImplicitGlobalConstTypeVariable,
        "deco" => Variable$2,
        "Foo" => Variable$6,
      },
      type: "global",
      upper: null,
      variables: Array [
        ImplicitGlobalConstTypeVariable,
        Variable$2,
        Variable$6,
      ],
    },
    FunctionScope$2 {
      block: TSDeclareFunction$1,
      isStrict: false,
      references: Array [],
      set: Map {
        "arguments" => Variable$3,
        "param" => Variable$4,
      },
      type: "function",
      upper: GlobalScope$1,
      variables: Array [
        Variable$3,
        Variable$4,
      ],
    },
    FunctionTypeScope$3 {
      block: TSFunctionType$2,
      isStrict: true,
      references: Array [],
      set: Map {
        "param" => Variable$5,
      },
      type: "functionType",
      upper: FunctionScope$2,
      variables: Array [
        Variable$5,
      ],
    },
    ClassScope$4 {
      block: ClassDeclaration$3,
      isStrict: true,
      references: Array [],
      set: Map {
        "Foo" => Variable$7,
      },
      type: "class",
      upper: GlobalScope$1,
      variables: Array [
        Variable$7,
      ],
    },
  ],
}
`;
