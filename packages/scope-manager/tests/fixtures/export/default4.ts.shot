// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`export default4 1`] = `
ScopeManager {
  variables: [
    ImplicitGlobalConstTypeVariable,
    Variable$2 {
      defs: [],
      name: "arguments",
      references: [],
      isValueVariable: true,
      isTypeVariable: true,
    },
  ],
  scopes: [
    GlobalScope$1 {
      block: Program$1,
      isStrict: false,
      references: [],
      set: Map {
        "const" => ImplicitGlobalConstTypeVariable,
      },
      type: "global",
      upper: null,
      variables: [
        ImplicitGlobalConstTypeVariable,
      ],
    },
    ModuleScope$2 {
      block: Program$1,
      isStrict: true,
      references: [],
      set: Map {},
      type: "module",
      upper: GlobalScope$1,
      variables: [],
    },
    FunctionScope$3 {
      block: FunctionDeclaration$2,
      isStrict: true,
      references: [],
      set: Map {
        "arguments" => Variable$2,
      },
      type: "function",
      upper: ModuleScope$2,
      variables: [
        Variable$2,
      ],
    },
  ],
}
`;

exports[`tests/fixtures.test.ts > export > default4 1`] = `
ScopeManager {
  variables: Array [
    ImplicitGlobalConstTypeVariable,
    Variable$2 {
      defs: Array [],
      name: "arguments",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
  ],
  scopes: Array [
    GlobalScope$1 {
      block: Program$1,
      isStrict: false,
      references: Array [],
      set: Map {
        "const" => ImplicitGlobalConstTypeVariable,
      },
      type: "global",
      upper: null,
      variables: Array [
        ImplicitGlobalConstTypeVariable,
      ],
    },
    ModuleScope$2 {
      block: Program$1,
      isStrict: true,
      references: Array [],
      set: Map {},
      type: "module",
      upper: GlobalScope$1,
      variables: Array [],
    },
    FunctionScope$3 {
      block: FunctionDeclaration$2,
      isStrict: true,
      references: Array [],
      set: Map {
        "arguments" => Variable$2,
      },
      type: "function",
      upper: ModuleScope$2,
      variables: Array [
        Variable$2,
      ],
    },
  ],
}
`;
