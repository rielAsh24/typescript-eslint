// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tests/fixtures.test.ts > ts-module > import 1`] = `
ScopeManager {
  variables: Array [
    ImplicitGlobalConstTypeVariable,
    Variable$2 {
      defs: Array [
        ImportBindingDefinition$1 {
          name: Identifier<"bar">,
          node: ImportSpecifier$1,
        },
      ],
      name: "bar",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
  ],
  scopes: Array [
    GlobalScope$1 {
      block: Program$2,
      isStrict: false,
      references: Array [],
      set: Map {
        "const" => ImplicitGlobalConstTypeVariable,
      },
      type: "global",
      upper: null,
      variables: Array [
        ImplicitGlobalConstTypeVariable,
      ],
    },
    ModuleScope$2 {
      block: Program$2,
      isStrict: true,
      references: Array [],
      set: Map {},
      type: "module",
      upper: GlobalScope$1,
      variables: Array [],
    },
    TSModuleScope$3 {
      block: TSModuleDeclaration$3,
      isStrict: true,
      references: Array [],
      set: Map {
        "bar" => Variable$2,
      },
      type: "tsModule",
      upper: ModuleScope$2,
      variables: Array [
        Variable$2,
      ],
    },
  ],
}
`;

exports[`ts-module import 1`] = `
ScopeManager {
  variables: [
    ImplicitGlobalConstTypeVariable,
    Variable$2 {
      defs: [
        ImportBindingDefinition$1 {
          name: Identifier<"bar">,
          node: ImportSpecifier$1,
        },
      ],
      name: "bar",
      references: [],
      isValueVariable: true,
      isTypeVariable: true,
    },
  ],
  scopes: [
    GlobalScope$1 {
      block: Program$2,
      isStrict: false,
      references: [],
      set: Map {
        "const" => ImplicitGlobalConstTypeVariable,
      },
      type: "global",
      upper: null,
      variables: [
        ImplicitGlobalConstTypeVariable,
      ],
    },
    ModuleScope$2 {
      block: Program$2,
      isStrict: true,
      references: [],
      set: Map {},
      type: "module",
      upper: GlobalScope$1,
      variables: [],
    },
    TSModuleScope$3 {
      block: TSModuleDeclaration$3,
      isStrict: true,
      references: [],
      set: Map {
        "bar" => Variable$2,
      },
      type: "tsModule",
      upper: ModuleScope$2,
      variables: [
        Variable$2,
      ],
    },
  ],
}
`;
